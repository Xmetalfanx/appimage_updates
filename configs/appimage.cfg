# 1 - Mount appimage content 
#     - example: ./balenaEtcher-1.18.11-x64.AppImage --appimage-mount
#                   - the mount commands mounts AND sends the path info to stdout 

# 2 - (not sure this is the best option) look for the .Desktop file
# 3 - get X-AppImage-Version version (format is "X-AppImage-Version=1.5.0")



# idea get local name of appimage file (basename likely to be used)
function get_appimage_name() {

    local_appimage_location=/home/$USER/Applications

    echo -e "Finding ${program_title}'s local AppImage"
    # ? can the find command take an argument?
    local_appimage_path=$(find "${local_appimage_location}" -type f -iname "${program_name}*" )
    local_appimage_name=$(basename ${local_appimage_path})

    # echo -e "local_appimage_path: ${local_appimage_path}"
    # echo -e "local_appimage_name: ${local_appimage_name}\v"
}


#- search in that location for the .Desktop file
function get_local_appimage_version() {
    # mounted location needed from "mount_local_appimage" function
    # local_appimage_version=$(echo -e "${local_appimage_name" | sed 's/amd64.*$//;s/x86_64.*$//' )
    local_appimage_version=$(echo -e "${local_appimage_name}" | sed 's/amd64.*$//;s/x86_64.*$//' )

    echo -e "local_appimage_version: ${local_appimage_version}"
}

# mount local appimage
# 1 - get /tmp/whatever location
# 2 - mount that location

# function mount_local_appimage() {

# #     - example: ./balenaEtcher-1.18.11-x64.AppImage --appimage-mount
# #                   - the mount commands mounts AND sends the path info to stdout 

# }

function get_local_appimage_info() {
    get_appimage_name

    get_local_appimage_version
}

