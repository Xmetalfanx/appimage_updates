# 1 - Mount appimage content 
#     - example: ./balenaEtcher-1.18.11-x64.AppImage --appimage-mount
#                   - the mount commands mounts AND sends the path info to stdout 

# 2 - (not sure this is the best option) look for the .Desktop file
# 3 - get X-AppImage-Version version (format is "X-AppImage-Version=1.5.0")



# idea get local name of appimage file (basename likely to be used)
function get_appimage_name() {
    
    local_appimage_location=/home/$USER/Applications

    echo -e "Finding ${program_name}'s local AppImage"
    # ? can the find command take an argument?
    local_appimage_path=$(find "${local_appimage_location}" -type f -iname "${program_name}*" )
    local_appimage_name=$(basename ${local_appimage_path})

    # echo -e "local_appimage_path: ${local_appimage_path}"
    # echo -e "local_appimage_name: ${local_appimage_name}\v"
}

#- search in that location for the .Desktop file
function get_local_appimage_version() {
    # mounted location needed from "mount_local_appimage" function

    #local_appimage_version=$(echo -e "${local_appimage_name}" | sed "s/$program_name//I;s/[a-zA-Z0-9]+64.*AppImage//g" )
    local_appimage_version=$(echo -e "${local_appimage_name}" | sed "s/[_a-zA-Z0-9]64.*AppImage//g;s/$program_name[-_]//;s/[-_].*$//" )


    echo -e "local_appimage_version: ${local_appimage_version}\v"
}

# mount local appimage
# 1 - get /tmp/whatever location
# 2 - mount that location

function mount_local_appimage() {

    # the "root" temp folder to store stuff 
    user_tmp_folder="/home/$USER/tmp"
    [ ! -d "$user_tmp_folder" ] && echo -e "Creating tmp folder in ${user_tmp_folder}" && mkdir ${user_tmp_folder}

    #for each app
    app_tmp_folder=${user_tmp_folder}/${program_name}
    [ ! -d "$app_tmp_folder" ] && echo -e "Creating tmp folder for ${program_name} in ${user_tmp_folder}" && mkdir ${app_tmp_folder}


    appimage_mount_folder=${app_tmp_folder}/${program_name}

    # note to self: not "100% sure" local_appimage_name is correct
    mount ${local_appimage_name} ${appimage_mount_folder}

    # look for X-AppImage-Version= in $
    version_test=$(grep "X-AppImage-Version=" "${appimage_mount_folder}/${program_name}.desktop" )
    
    echo -e "${version_test}"

    sleep 4

    clear
}

function get_local_appimage_info() {
    get_appimage_name

    get_local_appimage_version
}

function assign_appimage_vars() {
    # this SHOULD be just the base filename (including .AppImage)
    single_appimage_name=$(basename ${single_appimage})
    echo -e "\nsingle_appimage_name: $single_appimage_name"

    # ?? Should this be easier? ... i mean why not just have it equal "$program_name" ?
        # since i am using a loop here and not a function for each app ... there is NO "program_name"

    # this way MAY NOT work for all cases
    # s/[-_]v[0-9]//; 
        # - or I followed by a number, remove that 
    # s/[-_][0-9].*$//
        # (? redundant) - if there is no "v" before the version number 
    appimage_name=$(echo "${single_appimage_name}" | sed "s/[-_]v[0-9].*$//;s/[-_][0-9].*$//" )
    echo -e "appimage_name: ${appimage_name}"
}


function loop_through_appimages() {
    get_appimage_name

    # single_appimage is the full path to the local app image during that loop
    for single_appimage in ${local_appimage_location}/*.*
    do
        assign_appimage_vars

        sleep 1

        #echo -e "\vProcessing ${appimage_basename} ..."

        #mount_local_appimage

    done

}